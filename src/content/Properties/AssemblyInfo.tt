<#@ template hostspecific="true" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    _configuration = this.Host.ResolveParameterValue("", "", "BuildConfiguration");
    _projectFilePath = this.Host.ResolveParameterValue("", "", "ProjectFilePath");
    _outputFilePath = this.Host.ResolveParameterValue("", "", "OutputFilePath");
    QueryAssemblyInfoFromProjectFile();
    IncrementBuildNumber();
#>
using System.Reflection;

<# if (!String.IsNullOrWhiteSpace(_company)) {#>
[assembly: AssemblyCompany("<#= _company #>")]
<# } #>
<# if (!String.IsNullOrWhiteSpace(_configuration)) {#>
[assembly: AssemblyConfiguration("<#= _configuration #>")]
<# } #>
<# if (!String.IsNullOrWhiteSpace(_product)) {#>
[assembly: AssemblyProduct("<#= _product #>")]
<# } #>
<# if (!String.IsNullOrWhiteSpace(_title)) {#>
[assembly: AssemblyTitle("<#= _title #>")]
<# } #>
[assembly: AssemblyVersion("<#= _majorVersionNumber #>.<#= _minorVersionNumber #>.<#= _buildVersionNumber #>")]
[assembly: AssemblyFileVersion("<#= _majorVersionNumber #>.<#= _minorVersionNumber #>.<#= _buildVersionNumber #>")]
[assembly: AssemblyInformationalVersion("<#= _majorVersionNumber #>.<#= _minorVersionNumber #>.<#= _buildVersionNumber #>")]
<#+
    private string _configuration;
    private string _projectFilePath;
    private string _outputFilePath;
    private string _company;
    private string _product;
    private string _title;
    private int _majorVersionNumber;
    private int _minorVersionNumber;
    private int _buildVersionNumber;

    private void QueryAssemblyInfoFromProjectFile()
    {
        if (!File.Exists(_projectFilePath))
        {
            throw new Exception($"The project file does not exist at {_projectFilePath}");
        }
        
        
        XDocument projectDocument = XDocument.Load(_projectFilePath);
        XElement propertyGroup = projectDocument.Root.Descendants("PropertyGroup").FirstOrDefault();

        if (propertyGroup == null)
            return;
        
        
        _company = propertyGroup.Element("Company")?.Value;
        _product = propertyGroup.Element("Product")?.Value;
        _title = propertyGroup.Element("Title")?.Value;
            
        string version = propertyGroup.Element("Version")?.Value;
        Version parsedVersion;

        if (version == null)
        {
            throw new Exception("The \"Version\" property is not set in the project's .csproj file.");
        }
        else if (!Version.TryParse(version, out parsedVersion))
        {
            throw new Exception("The \"Version\" property specified in the project's .csproj file is not valid. A major, minor and build number must be specified.");
        }

        _majorVersionNumber = parsedVersion.Major;
        _minorVersionNumber = parsedVersion.Minor;
        _buildVersionNumber = parsedVersion.Build;
    }
    
    private void IncrementBuildNumber()
    {
        if (File.Exists(_outputFilePath))
        {
            string output = File.ReadAllText(_outputFilePath);
            var pattern = new Regex("AssemblyVersion\\(\"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<build>\\d+)\"\\)");
            MatchCollection matches = pattern.Matches(output);

            if (matches.Count == 1)
            {
                _buildVersionNumber = Convert.ToInt32(matches[0].Groups["build"].Value) + 1;
            }
            else
            {
                _buildVersionNumber = 1;
            }
        }
        else
        {
            _buildVersionNumber++;
        }
    }
#>